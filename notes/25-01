User 
username : string :req  :min 5
email : string : req : format needs to be validate, unique
password :string : req :min 8 max 128


//mongoose middleware or we can say pre hooks, post hooks
pre validate
validation()
post validate

pre save
save()
post save


//user.js
userSchema.pre('save', function (next) {
    if (this.isNew) {
        bcryptjs.genSalt(10).then((salt) => {
            bcryptjs.hash(this.password, salt).then((hashedPassword) => {
                this.password = hashedPassword
                next()
            })
        })
    }
    else {
        next()
    }

})

userSchema.statics.findByEmailandPassword = function (email, password) {
    const User = this
    return User.findOne({ email })
        .then((user) => {
            if (user) {
                 bcryptjs.compare(password, user.password)
                    .then((result) => {
                        if (result) {
                            return new Promise((resolve, reject) => {
                                resolve(user)
                            })
                        }
                        else {
                            return new Promise((resolve, reject) => {
                                const err = 'invalid Password'
                                reject(err)
                            })
                        }
                    })
            } else {
                return Promise.reject('invalid Email and Password')
            }

        })
        .catch((err) => {
            return Promise.reject(err)
        })
}
userSchema.statics.findByToken = function (token) {
    const User = this
    let tokenData
    try {
        tokenData = jwt.verify(token, 'dct@welt123')
    } catch (err) {
        return Promise.reject(err)
    }
    console.log(tokenData)
    return User.findOne({
        '_id': tokenData.userid,
        'tokens.token': token
    })
        .then((user) => {
            return Promise.resolve(user)
        })
        .catch((err) => {
            return Promise.reject(err)
        })

}

userSchema.methods.generateToken = function () {
    const user = this
    const tokenData = {
        userid: user._id
    }

    const token = jwt.sign(tokenData, 'dct@welt123')
    user.tokens.push({ token })
    return user.save()
        .then((user) => {
            return token
        })
        .catch((err) => {
            return err
        })


}